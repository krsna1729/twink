import socket

def aton_ip(ip):
    return bytearray(socket.inet_aton(ip))

import struct

def aton_mac(mac):
    return struct.pack('6B', *(int(x,base=16) for x in mac.split(':')))

def aton_tunid(tid):
    return struct.pack('<H', tid)

### n=101 is magic number for LOCAL

OUT1::Sink()
OUT2::Sink()
OUT3::Sink()
OUT4::Sink()

LCL::Sink()
CTL::Sink()

HWSRC=0
HWDST=6
IPSRC=26
IPDST=30

### Create the modules
t0_start::BPF()
t0_inport::ExactMatch(fields=[{'name':'in_port', 'size':1}],
                      size=4096)
t0_p2::BPF()
t0_default::BPF()

t1_start::WildcardMatch(fields=[{'name':'in_port', 'size':1},
                                {'offset':IPSRC, 'size':4}])


t2_start::ExactMatch(fields=[{'offset':IPSRC, 'size':4,'mask':0xFF000000},
                             {'offset':IPDST, 'size':4}],
                     size=4096)
t2_B::ExactMatch(fields=[{'offset':IPSRC, 'size':4,'mask':0xFF000000},
                         {'offset':IPDST, 'size':4,'mask':0xFF000000}],
                 size=4096)
t2_C::ExactMatch(fields=[{'offset':IPSRC, 'size':4,'mask':0xFF000000}],
                 size=4096)


t3_start::ExactMatch(fields=[{'name':'in_port', 'size':1}],
                     size=4096)


t4_start::ExactMatch(fields=[{'offset':IPDST, 'size':4}],
                      size=4096)


t5_start::ExactMatch(fields=[{'name':'tun_id', 'size':2},
                             {'offset':HWSRC, 'size':6}],
                     size=4096)


t6_start::BPF()


grp_start::HashLB(2)



### Set module state
## t0_start
#table=0 priority=55000 vlan_tci=0x1000/0x1000 actions=goto_table:6
t0_start.add([{'priority' : 55000,
               'filter'   : 'vlan and vlan',
               'gate'     : 1 }])
t0_start:1      -> t6_start
# otherwise go to inport table
t0_start:0      -> t0_inport


## t0_inport
# port 2 to t0_p2
t0_inport.add(fields=[bytearray(chr(2))], gate=1)
t0_inport:1  -> t0_p2
# LOCAL to t0_local
t0_inport.add(fields=[bytearray(chr(101))], gate=2)
#table=0 priority=50000	in_port=LOCAL actions=output:2
t0_inport:2  -> OUT2
# everything else to t0_default
t0_inport.set_default_gate(0)
t0_inport:0  -> t0_default


## t0_p2
# table=0 priority=50000 ip in_port=2 nw_dst=1.1.1.1 actions=LOCAL
t0_p2.add([{'priority' : 50000,
            'filter'   : 'ip and dst host 1.1.1.1',
            'gate'     : 1 }])
t0_p2:1      -> LCL
#table=0 priority=50000	arp in_port=2 arp_tpa=1.1.1.1 actions=LOCAL
t0_p2.add([{'priority' : 50000,
            'filter'   : 'arp and dst host 1.1.1.1',
            'gate'     : 1 }])
#table=0 priority=50000	udp in_port=2 tp_dst=4789 actions=LOCAL
t0_p2.add([{'priority' : 50000,
            'filter'   : 'udp and dst port 4789',
            'gate'     : 1 }])
# otherwise go to default table
t0_p2:0      -> t0_default


## t0_default
# table=0 priority=40000 udp tp_src=68 tp_dst=67 actions=CONTROLLER:65535
t0_default.add([{'priority' : 40000,
                 'filter'   : 'udp and src port 68 and dst port 67',
                 'gate'     : 1 }])
t0_default:1 -> CTL
# table=0 priority=40000 dl_type=0x88cc	actions=CONTROLLER:65535
t0_default.add([{'priority' : 40000,
                 'filter'   : 'ether proto 0x88cc',
                 'gate'     : 1 }])
# table=0 priority=40000 dl_type=0x8942 actions=CONTROLLER:65535
t0_default.add([{'priority' : 40000,
                 'filter'   : 'ether proto 0x8942',
                 'gate'     : 1 }])
#table=0 priority=40000	arp actions=CONTROLLER:65535
t0_default.add([{'priority' : 40000,
                 'filter'   : 'arp',
                 'gate'     : 1 }])
# table=0 priority=0 actions=goto_table:1
t0_default:0 -> t1_start


## t1_start
# table=1 priority=5000 in_port=1                      actions=goto_table:5
t1_start.add(values=[1,    aton_ip('0.0.0.0')], gate=0,
             masks= [0xff, aton_ip('0.0.0.0')], priority=5000)
t1_start:0 -> t5_start
# table=1 priority=5000 in_port=2                      actions=goto_table:4
t1_start.add(values=[2,    aton_ip('0.0.0.0')], gate=1,
             masks= [0xff, aton_ip('0.0.0.0')], priority=5000)
t1_start:1 -> t4_start
# table=1 priority=5000 ip in_port=3 nw_src=10.10.10.3 actions=goto_table:2
t1_start.add(values=[3,    aton_ip('10.10.10.3')], gate=2,
             masks= [0xff, aton_ip('255.255.255.255')], priority=5000)
t1_start:2 -> t2_start
# table=1 priority=5000 ip in_port=4 nw_src=10.10.12.3 actions=goto_table:2
t1_start.add(values=[4,    aton_ip('10.10.12.3')], gate=2,
             masks= [0xff, aton_ip('255.255.255.255')], priority=5000)
# table=1 priority=4000 in_port=3                      actions=goto_table:3
t1_start.add(values=[3,    aton_ip('0.0.0.0')], gate=3,
             masks= [0xff, aton_ip('0.0.0.0')], priority=4000)
t1_start:3 -> t3_start
# table=1 priority=4000 in_port=4                      actions=goto_table:3
t1_start.add(values=[3,    aton_ip('0.0.0.0')], gate=3,
             masks= [0xff, aton_ip('0.0.0.0')], priority=4000)
# otherwise drop
t1_start.set_default_gate(4)
t1_start:4 -> Sink()


## t2_start
# table=2 priority=50000 ip nw_src=10.10.10.0/24 nw_dst=10.10.12.1 actions=group:2953848289
t2_start.add(fields=[aton_ip('10.10.10.0'),aton_ip('10.10.12.1')], gate=1)
t2_start:1 -> grp_start
# otherwise match on stage B
t2_start.set_default_gate(0)
t2_start:0 -> t2_B


## t2_B
# table=2 priority=5000 ip nw_src=10.10.12.0/24 nw_dst=10.10.12.0/24 actions=goto_table:4
t2_B.add(fields=[aton_ip('10.10.12.0'),aton_ip('10.10.12.0')], gate=1)
t2_B:1 -> t4_start
# table=2 priority=5000 ip nw_src=10.10.12.0/24 nw_dst=10.10.10.0/24 actions=goto_table:4
t2_B.add(fields=[aton_ip('10.10.12.0'),aton_ip('10.10.10.0')], gate=1)
#table=2 priority=5000 ip nw_src=10.10.10.0/24 nw_dst=10.10.12.0/24 actions=goto_table:4
t2_B.add(fields=[aton_ip('10.10.10.0'),aton_ip('10.10.12.0')], gate=1)
# table=2 priority=5000 ip nw_src=10.10.10.0/24 nw_dst=10.10.10.0/24 actions=goto_table:4
t2_B.add(fields=[aton_ip('10.10.10.0'),aton_ip('10.10.10.0')], gate=1)
# otherwise match on stage C
t2_B.set_default_gate(0)
t2_B:0 -> t2_C


## t2_C
# table=2 priority=4000 ip nw_dst=10.10.10.0/24 actions=drop
t2_C.add(fields=[aton_ip('10.10.10.0')], gate=1)
t2_C:1 -> Sink()
# table=2 priority=4000 ip nw_dst=10.10.12.0/24 actions=drop
t2_C.add(fields=[aton_ip('10.10.12.0')], gate=1)
# table=2 priority=0 actions=output:2
t2_C.set_default_gate(0)
t2_C:0 -> OUT2


## t3_start
# table=3 priority=5000 in_port=3 actions=group:2953848289
t3_start.add(fields=[bytearray(chr(3))], gate=1)
t3_start:1 -> grp_start
# otherwise drop
t3_start.set_default_gate(0)
t3_start:0 -> Sink()


## t4_start
# table=4 priority=5000 ip nw_dst=10.10.12.3 actions=set_field:fa:16:3e:cf:f2:56->eth_dst output:4
t4_start.add(fields=[bytearray(aton_ip('10.10.12.3'))], gate=1)
t4_start:1 -> Update([{'offset':HWDST, 'size': 6, 'value': 'fa:16:3e:cf:f2:56'}]) -> OUT4

# table=4 priority=5000 ip nw_dst=10.10.12.2 actions=set_field:fa:16:3e:f3:5e:82->eth_dst set_field:0x40c->tun_id set_field:1.1.1.2->tun_dst output:1
t4_start.add(fields=[bytearray(aton_ip('10.10.12.2'))], gate=2)
t4_start:2 -> Update([{'offset': HWDST, 'size': 6, 'value': 'fa:16:3e:f3:5e:82'},
                      {'name':'tun_id', 'size':2, 'value': 0x40c},
                      {'name':'tun_dst', 'size':4, 'value': '1.1.1.2'}]) -> OUT1 
# table=4 priority=5000 ip nw_dst=10.10.10.2 actions=set_field:fa:16:3e:da:05:ed->eth_dst set_field:0x406->tun_id set_field:1.1.1.2->tun_dst output:1
t4_start.add(fields=[bytearray(aton_ip('10.10.10.2'))], gate=3)
t4_start:3 -> Update([{'offset': HWDST, 'size': 6, 'value': 'fa:16:3e:da:05:ed'},
                      {'name':'tun_id', 'size':2, 'value': 0x406},
                      {'name':'tun_dst', 'size':4, 'value': '1.1.1.2'}]) -> OUT1 

# table=4 priority=5000 ip nw_dst=10.10.10.3 actions=set_field:fa:16:3e:3e:82:e8->eth_dst output:3
t4_start.add(fields=[bytearray(aton_ip('10.10.10.2'))], gate=4)
t4_start:4 -> Update([{'offset':HWDST, 'size': 6, 'value': 'fa:16:3e:3e:82:e8'}]) -> OUT3


# table=5 priority=5000 tun_id=0x406 dl_dst=fa:16:3e:3e:82:e8 actions=output:3
t5_start.add(fields=[bytearray(aton_tunid(0x406)),bytearray(aton_mac('fa:16:3e:3e:82:e8'))], gate=1)
t5_start:1 -> OUT3
# table=5 priority=5000 tun_id=0x40c dl_dst=fa:16:3e:cf:f2:56 actions=output:4
t5_start.add(fields=[bytearray(aton_tunid(0x40c)),bytearray(aton_mac('fa:16:3e:3e:82:e8'))], gate=1)
t5_start:2 -> OUT4
# otherwise drop
t5_start.set_default_gate(0)
t5_start:0 -> Sink()

# table=6 priority=50000 arp dl_vlan=500 actions=CONTROLLER:65535
t6_start.add([{'priority' : 50000,
         'filter'   : 'vlan 500 and arp',
         'gate'     : 1 }])
t6_start:1 -> CTL
# table=6 priority=5000 dl_vlan=500 actions=pop_vlan output:2
t6_start:2 -> VLANPop() -> OUT2 
t6_start.add([{'priority' : 5000,
         'filter'   : 'vlan 500',
         'gate'     : 2 }])
# otherwise drop
t6_start:0 -> Sink()



# group_id=2953848289 type=select
grp_start.set_mode('l4')
#     bucket=actions= set_field:fa:16:3e:f3:5e:82->eth_dst
#                     set_field:1.1.1.2->tun_dst
#                     set_field:0x40c->tun_id
#                     output:1
grp_start:0 -> Update([{'offset': HWDST, 'size': 6, 'value': 'fa:16:3e:f3:5e:82'},
                       {'name':'tun_id', 'size':2, 'value': 0x40c},
                       {'name':'tun_dst', 'size':4, 'value': '1.1.1.2'}]) -> OUT1 
#     bucket=actions= set_field:fa:16:3e:cf:f2:56->eth_dst
#                     output:4
grp_start:1 -> Update([{'offset': HWDST, 'size': 6, 'value': 'fa:16:3e:cf:f2:56'}]) -> OUT4

