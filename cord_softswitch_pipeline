#!/usr/bin/env python2.7
import sys
import os
import os.path
import pprint
import cStringIO
import socket
import struct

def aton_ip(ip):
    return bytearray(socket.inet_aton(ip))

def aton_mac(mac):
    return struct.pack('6B', *(int(x,base=16) for x in mac.split(':')))

def aton_tunid(tid):
    return struct.pack('<H', tid)

def set_val(field, val):
    output = field.copy()
    output.update({'value' : val})
    return output


HWSRC  ={'offset' :  0,
         'size'   :  6}
HWDST  ={'offset' :  6,
         'size'   :  6}
ETHTYPE={'offset' : 12,
         'size'   :  2}
VLANID ={'offset' : 14,
         'size'   :  2}
IPSRC  ={'offset' : 26,
         'size'   :  4}
IPDST  ={'offset' : 30,
         'size'   :  4}

INPORT ={'name'   : 'in_port',
         'size'   :  1}
TUNID  ={'name'   : 'tun_id',
         'size'   :  2}
TUNDST ={'name'   : 'tun_dst',
         'size'   :  4} 

TYPE_QINQ=0x88A8
TYPE_VLAN=0x8100


LIBBESS='~/bess/libbess-python'

try:
    this_dir = os.path.expanduser(LIBBESS)
    sys.path.insert(1, this_dir)
    from bess import *
except ImportError:
    print >> sys.stderr, 'Cannot import the API module (libbess-python)'

    
def connect_bess():
    B = BESS()
    try:
        B.connect()
    except B.APIError as e:
        print >> sys.stderr, e.message
    return B

if __name__ == '__main__':
    B = connect_bess()
    if B.is_connected():
        print '%s:%d' % B.peer
    else:
        print '<disconnected>'

    B.pause_all()
    B.reset_all()
    B.resume_all()
        
    name='OUT'
    for i in range(1,5):
        B.create_module('Sink', name=name + str(i), arg=None)
    B.create_module('Sink', name='LCL', arg=None)
    B.create_module('Sink', name='CTL', arg=None)
    B.create_module('Sink', name='DROP', arg=None)
    
    B.create_module('WildcardMatch',
                    name='t0_start',
                    arg={'fields' : [ETHTYPE,VLANID],
                         'size' : 4096})
    B.create_module('ExactMatch',
                    name='t0_inport',
                    arg={'fields' : [INPORT],
                         'size' : 4096})
    B.create_module('BPF', name='t0_p2')
    B.create_module('BPF', name='t0_default')


    B.create_module('WildcardMatch',
                    name='t1_start',
                    arg={'fields' : [INPORT,IPSRC],
                         'size' : 4096})

    
    B.create_module('WildcardMatch',
                    name='t2_start',
                    arg={'fields' : [IPSRC,IPDST],
                         'size' : 4096})

    

    B.create_module('ExactMatch',
                    name='t3_start',
                    arg={'fields' : [INPORT],
                         'size' : 4096})

    
    B.create_module('ExactMatch',
                    name='t4_start',
                    arg={'fields' : [IPDST],
                         'size' : 4096})


    B.create_module('ExactMatch',
                    name='t5_start',
                    arg={'fields' : [TUNID,HWSRC],
                         'size' : 4096})

    
    B.create_module('BPF', name='t6_start')


    B.create_module('HashLB',
                    name='grp_start',
                    arg=2)
    
    B.pause_all()
    try:
        B.connect_modules('t0_start', 't6_start'   , 1, 0)
        B.connect_modules('t0_start', 't0_inport'  , 0, 0)
        
        B.connect_modules('t0_inport', 't0_p2'     , 1, 0)
        B.connect_modules('t0_inport', 'OUT2'      , 2, 0)
        B.connect_modules('t0_inport', 't0_default', 0, 0)
        
        B.connect_modules('t0_p2', 'LCL'           , 1, 0)
        B.connect_modules('t0_p2', 't0_default'    , 0, 0)
        
        B.connect_modules('t0_default', 'CTL'      , 1, 0)
        B.connect_modules('t0_default', 't1_start' , 0, 0)

        B.connect_modules('t1_start'  , 't5_start' , 0, 0)
        B.connect_modules('t1_start'  , 't4_start' , 1, 0)
        B.connect_modules('t1_start'  , 't2_start' , 2, 0)
        B.connect_modules('t1_start'  , 't3_start' , 3, 0)
        B.connect_modules('t1_start'  , 'DROP'     , 4, 0)
        
    finally:
        B.resume_all()    

    #table=0 priority=55000 vlan_tci=0x1000/0x1000 actions=goto_table:6
    B.run_module_command('t0_start','add', {'priority' : 55000,
                                            'values'   : [TYPE_VLAN, 0x1000],
                                            'masks'    : [0xffff,    0x1000],
                                            'gate'     : 1 })
    B.run_module_command('t0_start','add', {'priority' : 55000,
                                            'values'   : [TYPE_QINQ, 0x1000],
                                            'masks'    : [0xffff,    0x1000],
                                            'gate'     : 1 })

    # port 2 to t0_p2
    B.run_module_command('t0_inport','add', {'fields'  : [bytearray(chr(2))],
                                             'gate'    : 1})
    #table=0 priority=50000	in_port=LOCAL actions=output:2
    B.run_module_command('t0_inport','add', {'fields'  : [bytearray(chr(101))],
                                             'gate'    : 2})
    
    # table=0 priority=50000 ip in_port=2 nw_dst=1.1.1.1 actions=LOCAL
    B.run_module_command('t0_p2','add', [{'priority' : 50000,
                                          'filter'   : 'ip and dst host 1.1.1.1',
                                          'gate'     : 1 }])
    #table=0 priority=50000	arp in_port=2 arp_tpa=1.1.1.1 actions=LOCAL
    B.run_module_command('t0_p2','add', [{'priority' : 50000,
                                          'filter'   : 'arp and dst host 1.1.1.1',
                                          'gate'     : 1 }])
    #table=0 priority=50000	udp in_port=2 tp_dst=4789 actions=LOCAL
    B.run_module_command('t0_p2','add', [{'priority' : 50000,
                                          'filter'   : 'udp and dst port 4789',
                                          'gate'     : 1 }])
    
    # table=0 priority=40000 udp tp_src=68 tp_dst=67 actions=CONTROLLER:65535
    B.run_module_command('t0_default','add', [{'priority' : 40000,
                                               'filter'   : 'udp and src port 68 and dst port 67',
                                               'gate'     : 1 }])
    # table=0 priority=40000 dl_type=0x88cc	actions=CONTROLLER:65535
    B.run_module_command('t0_default','add', [{'priority' : 40000,
                                               'filter'   : 'ether proto 0x88cc',
                                               'gate'     : 1 }])
    # table=0 priority=0 actions=goto_table:1
    B.run_module_command('t0_default','add', [{'priority' : 40000,
                                               'filter'   : 'ether proto 0x8942',
                                               'gate'     : 1 }])
    #table=0 priority=40000	arp actions=CONTROLLER:65535
    B.run_module_command('t0_default','add', [{'priority' : 40000,
                                               'filter'   : 'arp',
                                               'gate'     : 1 }])


    # table=1 priority=5000 in_port=1                      actions=goto_table:5
    B.run_module_command('t1_start','add', {'priority' : 5000,
                                            'values'   : [1,    aton_ip('0.0.0.0')],
                                            'masks'    : [0xff, aton_ip('0.0.0.0')],
                                            'gate'     : 0 })

    # table=1 priority=5000 in_port=2                      actions=goto_table:4
    B.run_module_command('t1_start','add', {'priority' : 5000,
                                            'values'   : [2,    aton_ip('0.0.0.0')],
                                            'masks'    : [0xff, aton_ip('0.0.0.0')],
                                            'gate'     : 1 })
    # table=1 priority=5000 ip in_port=3 nw_src=10.10.10.3 actions=goto_table:2
    B.run_module_command('t1_start','add', {'priority' : 5000,
                                            'values'   : [3,    aton_ip('10.10.10.3')], 
                                            'masks'    : [0xff, aton_ip('255.255.255.255')], 
                                            'gate'     : 2 })
    # table=1 priority=5000 ip in_port=4 nw_src=10.10.12.3 actions=goto_table:2
    B.run_module_command('t1_start','add', {'priority' : 5000,
                                            'values'   : [4,    aton_ip('10.10.12.3')], 
                                            'masks'    : [0xff, aton_ip('255.255.255.255')], 
                                            'gate'     : 2 })
    # table=1 priority=4000 in_port=3                      actions=goto_table:3
    B.run_module_command('t1_start','add', {'priority' : 4000,
                                            'values'   : [3,    aton_ip('0.0.0.0')], 
                                            'masks'    : [0xff, aton_ip('0.0.0.0')], 
                                            'gate'     : 3 })
    # table=1 priority=4000 in_port=4                      actions=goto_table:3
    B.run_module_command('t1_start','add', {'priority' : 4000,
                                            'values'   : [3,    aton_ip('0.0.0.0')], 
                                            'masks'    : [0xff, aton_ip('0.0.0.0')], 
                                            'gate'     : 3 })
    # otherwise drop
    B.run_module_command('t1_start','set_default_gate', 4)
